<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd">

	<!-- DispatcherServlet Context: defines this servlet's request-processing infrastructure -->
	
	<!-- Enables the Spring MVC @Controller programming model -->
	<annotation-driven />

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources directory -->
	<!-- view(jsp문서)에서 사용될 이미지,css파일,js파일등의 경로를 지정하는 곳-->
	<resources mapping="/resources/**" location="/resources/" />

	<!-- Resolves viws selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory -->
	 <!-- viewResolver는  컨트롤러의 (비즈니스로직)처리 결과 및
      뷰(View)선택에 필요한 정보를 저장한다 
   ViewResolver stores the results of the controller's (business logic) processing and the information required to select the view.   -->
	<!-- tiles를 사용하면서는 주석처리하겠다
	<beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
	</beans:bean>
	-->
	
	<!-- 타일즈(tiles) 사용관련 설정 시작 -->
	<!-- springframework의   TilesConfigurere클래스를 이용해 
	     id가   tilesConfigurer인   빈(bean)을 생성한다-->
	<beans:bean id="tilesConfigurer" class="org.springframework.web.servlet.view.tiles2.TilesConfigurer">
		<beans:property name="definitions">
			<beans:list>
				<!-- 패키지명이  tiles인 하위의  모든 xml문서파일을 읽어 들인다-->
				<beans:value>classpath:tiles/*.xml</beans:value>
			</beans:list>
		</beans:property>
		<beans:property name="preparerFactoryClass"
			          	  value="org.springframework.web.servlet.view.tiles2.SpringBeanPreparerFactory" />
	</beans:bean>
	
	<!-- 타일즈뷰리졸버(viewResolver)를 사용해  화면(view)를 표시한다
	     bean의 id속성값은  반드시 unique함을 주의해야한다
	     기존의   <beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver"> 과
	   id속성값이 충돌되지 않도록 주의합니다 -->
	<beans:bean id="viewResolver"
		class="org.springframework.web.servlet.view.UrlBasedViewResolver">
		<beans:property name="viewClass" value="org.springframework.web.servlet.view.tiles2.TilesView" />
	</beans:bean>
	<!-- 타일즈(tiles) 사용관련 설정 끝 -->
	
	<!-- 멀티파트 리졸버 -->
    <beans:bean id="multipartResolver"  class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
       <beans:property name="maxUploadSize" 	value="52428800" /><!-- maxUploadSize : 최대업로드가 가능한 파일의 크기. 여기에서는 50MB -->
       <beans:property name="maxInMemorySize" value="52428800" /><!-- maxInMemorySize : 디스크에 임시 파일을 생성하기 전 메모리에 보관할 수 있는 최대 바이트 크기의 설정.여기에서는 50MB -->
       <beans:property name="defaultEncoding" 	value="utf-8" />		<!-- defaultEncoding : 전달되는 매개변수의 인코딩을 설정 -->
    </beans:bean>
    
    <resources mapping="/images/**" location="file:///C:/tyranitar/" />
	
	
	<!-- 애플리케이션 실행 시  
				base-package에서 지정한 패키지에 있는 클래스를 
				애너테이션(@)으로 지정된 클래스를 bean으로 만들어준다 
@Controller : 스프링컨테이너가 component-scan에 의해서 지정된 클래스를
							컨트롤러 빈(controller bean)으로 자동 변환한다
@Service 		: 서비스 빈(service bean)으로 자동 변환한다	
@Repository : DAO 빈으로  자동 변환한다
@Component	: 빈으로 자동 변환한다
 ==> 이러한 클래스들은  스프링실행시  자동으로 빈으로 생성된다		-->
	<context:component-scan base-package="com.tyranitar" />
	
	
	
</beans:beans>



